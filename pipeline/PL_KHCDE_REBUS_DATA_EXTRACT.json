{
	"name": "PL_KHCDE_REBUS_DATA_EXTRACT",
	"properties": {
		"description": "Generic Pipeline created to Extract from REBUS System",
		"activities": [
			{
				"name": "LU-Metadata",
				"description": "Look up activity to read metadata based in pipeline inout parameters to perform data extraction from SAP Catalysts system",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Audit_Pipeline_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "select * from khc_orchestration_metadata where application_name = '@{pipeline().parameters.application_name}' and dataset_group = '@{pipeline().parameters.dataset_group}' and parent_id like '%@{pipeline().parameters.parent_id}%'and active_ind = 'y'",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_KHCDE_GENERIC_MSSQL_Metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "FE-Metadata",
				"description": "Loop through each of the dataset to perform data extraction using Rebus data extract pipeline",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LU-Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LU-Metadata').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"activities": [
						{
							"name": "WB-Rebus_Login",
							"description": "Web activity to log on to Rebus system to fetch session cookie.",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "WB-Get_Login_Secret",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 120,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "https://api4.rebusap.com/login",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "KHAZ-EUS2-SHIR",
									"type": "IntegrationRuntimeReference"
								},
								"method": "POST",
								"headers": {
									"Content-Type": {
										"value": "application/json",
										"type": "Expression"
									}
								},
								"body": {
									"value": "@concat('{\"api_username\":\"kraft_kIavZWZuw\",\"api_password\":\"',trim(activity('WB-Get_Login_Secret').output.value),'\"}')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "CP-Rebus_Extraction_ToArchive",
							"description": "Activity uses the session cookie to extract data out of Rebus System",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "WB-Rebus_Login",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "GET_THE_EXT_DATE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 120,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "HttpReadSettings",
										"requestMethod": "GET",
										"additionalHeaders": {
											"value": "Content-Type:application/json\nCookie:@{activity('WB-Rebus_Login').output.ADFWebActivityResponseHeaders['Set-Cookie']}",
											"type": "Expression"
										},
										"requestTimeout": ""
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "DS_KHCDE_Rebus_Source_DS",
									"type": "DatasetReference",
									"parameters": {
										"relative_url": {
											"value": "@item().server_path",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_KHCDE_Rebus_Json_extract",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@item().container_name",
											"type": "Expression"
										},
										"blob_path": {
											"value": "@{replace(item().archival_blob_name, 'yyyyMMdd', variables('extract_date'))}",
											"type": "Expression"
										},
										"file_name": {
											"value": "@{concat(item().data_filename,'.',item().pattern_type)}",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "WB-Get_Login_Secret",
							"description": "Activity to fetch secret value to login",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "set_env_variable",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 120,
								"secureOutput": true,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@{concat('https://khcde-kv-', toLower(variables('env')), '.vault.azure.net/secrets/khcde-kv-sec-rest-rebus-pwd/?api-version=7.0')}",
									"type": "Expression"
								},
								"method": "GET",
								"authentication": {
									"type": "MSI",
									"resource": "https://vault.azure.net"
								}
							}
						},
						{
							"name": "GET_THE_EXT_DATE",
							"description": "Get the Date of Extraction as of CST Time",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "extract_date",
								"value": {
									"value": "@{formatDateTime(addHours(utcNow(),-6),'yyyyMMdd')}",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SV-DATA_EXTRACT_STATUS_SUCCESS",
							"description": "Set the EXECUTE_STATUS = 'SUCCESS' when Execution Status is SUCCESS, else its set to 'FAILED'",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "CP-Rebus_Extraction_ToArchive",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "data_extract_status",
								"value": {
									"value": "SUCCESS",
									"type": "Expression"
								}
							}
						},
						{
							"name": "SV-DATA_EXTRACT_STATUS_FAIL",
							"description": "Set the EXECUTE_STATUS = 'FAILED' when the Data Extract Step Fails\n",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "CP-Rebus_Extraction_ToArchive",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "data_extract_status",
								"value": {
									"value": "FAILED",
									"type": "Expression"
								}
							}
						},
						{
							"name": "FETCH_STAGE_FILE",
							"description": "Check if STAGE location as files from earlier data extract",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "SV-DATA_EXTRACT_STATUS_SUCCESS",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 5,
								"retryIntervalInSeconds": 120,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_Folder",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@{item().container_name}",
											"type": "Expression"
										},
										"blob_name": {
											"value": "@{item().stage_blob_name}",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "IF_DELETE_STAGE_FILES",
							"description": "Delete files at staging location if present from earlier run",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "FETCH_STAGE_FILE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(and(activity('FETCH_STAGE_FILE').output.Exists,not(equals(coalesce(trim(item().stage_blob_name), ''), ''))),not(equals(coalesce(trim(item().container_name), ''), '')))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "DELETE_STAGE_FILES",
										"description": "Delete previous extraction files from stage location",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 5,
											"retryIntervalInSeconds": 120,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_Folder",
												"type": "DatasetReference",
												"parameters": {
													"container_name": {
														"value": "@{item().container_name}",
														"type": "Expression"
													},
													"blob_name": {
														"value": "@{item().stage_blob_name}",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false
											}
										}
									},
									{
										"name": "SP-ActivityAndPipelineFailed_DeleteStage",
										"description": "Update delete stage location activity failure and pipeline failure in audit logs.",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "DELETE_STAGE_FILES",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 50,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[generic_activity_error_audit_log]",
											"storedProcedureParameters": {
												"action_ind": {
													"value": "U",
													"type": "String"
												},
												"activity_name": {
													"value": {
														"value": "DELETE STAGE FILES",
														"type": "Expression"
													},
													"type": "String"
												},
												"activity_status": {
													"value": {
														"value": "Failed",
														"type": "Expression"
													},
													"type": "String"
												},
												"application_name": {
													"value": {
														"value": "@{item().application_name}",
														"type": "Expression"
													},
													"type": "String"
												},
												"dataset_name": {
													"value": {
														"value": "@{item().table_name}",
														"type": "Expression"
													},
													"type": "String"
												},
												"pipeline_run_id": {
													"value": {
														"value": "@{pipeline().RunId}",
														"type": "Expression"
													},
													"type": "String"
												},
												"pipeline_status": {
													"value": {
														"value": "Failed ",
														"type": "Expression"
													},
													"type": "String"
												},
												"skip_pipeline_audit_update": {
													"value": "N",
													"type": "String"
												},
												"error_code": {
													"value": {
														"value": "@activity('DELETE_STAGE_FILES').Error.errorCode",
														"type": "Expression"
													},
													"type": "String"
												},
												"error_detail": {
													"value": {
														"value": "@activity('DELETE_STAGE_FILES').Error.message",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SQL",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "COPY_FILES_TO_STAGE",
							"description": "Check the Execution Status and Copy the files to Stage Folders & Create Trigger files",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "IF_DELETE_STAGE_FILES",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@variables('data_extract_status')",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "SUCCESS",
										"activities": [
											{
												"name": "COPY_TO_STAGE",
												"description": "Copy files from land to stage location for snowflake ingestion",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 5,
													"retryIntervalInSeconds": 120,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "HttpReadSettings",
															"requestMethod": "GET",
															"additionalHeaders": {
																"value": "Content-Type:application/json\nCookie:@{activity('WB-Rebus_Login').output.ADFWebActivityResponseHeaders['Set-Cookie']}",
																"type": "Expression"
															},
															"requestTimeout": ""
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "JsonSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "JsonWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_KHCDE_Rebus_Source_DS",
														"type": "DatasetReference",
														"parameters": {
															"relative_url": "@item().server_path"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_KHCDE_Rebus_Json_extract",
														"type": "DatasetReference",
														"parameters": {
															"container_name": "@item().container_name",
															"blob_path": "@{item().stage_blob_name}",
															"file_name": "@{concat(item().data_filename,'.',item().pattern_type)}"
														}
													}
												]
											},
											{
												"name": "CREATE_TRIGGER_FILE",
												"description": "Create blob trigger files after data extract is complete",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "COPY_TO_STAGE",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 5,
													"retryIntervalInSeconds": 120,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "select current_timestamp",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_KHCDE_GENERIC_MSSQL_Metadata",
														"type": "DatasetReference"
													}
												],
												"outputs": [
													{
														"referenceName": "DS_KHCDE_GENERIC_BLOB_CSV_FolderFile",
														"type": "DatasetReference",
														"parameters": {
															"container_name": {
																"value": "@{item().container_name}",
																"type": "Expression"
															},
															"blob_name": {
																"value": "@if(contains(item().blob_trigger_name, '/'), substring(item().blob_trigger_name, 0, lastIndexOf(item().blob_trigger_name, '/')), 'sales/triggers')",
																"type": "Expression"
															},
															"file_name": {
																"value": "@if(contains(item().blob_trigger_name, '/'), last(split(item().blob_trigger_name, '/')), item().blob_trigger_name)",
																"type": "Expression"
															},
															"field_delimiter": {
																"value": ",",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "FAIL_THE_PIPE_LINE",
										"description": "force the pipeline to fail to show up failure in monitors",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "7.00:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "SqlServerSource",
												"sqlReaderQuery": "SELECT * FROM FAIL_THE_PIPE_LINE",
												"queryTimeout": "02:00:00",
												"partitionOption": "None"
											},
											"dataset": {
												"referenceName": "DS_KHCDE_GENERIC_MSSQL_Metadata",
												"type": "DatasetReference"
											},
											"firstRowOnly": false
										}
									}
								]
							}
						},
						{
							"name": "EXTRACTION_FAIL_THE_PIPE_LINE",
							"description": "force the pipeline to fail to show up failure in monitors",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "SV-DATA_EXTRACT_STATUS_FAIL",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlServerSource",
									"sqlReaderQuery": "SELECT * FROM FAIL_THE_PIPE_LINE",
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_KHCDE_GENERIC_MSSQL_Metadata",
									"type": "DatasetReference"
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "set_env_variable",
							"description": "Set the variable - ENV from global parameters - AZURE_ENV",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "env",
								"value": {
									"value": "@pipeline().globalParameters.AZURE_ENV",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Audit_Pipeline_Start",
				"description": "Activity to make audit log entry for pipeline execution start.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 50,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
					"storedProcedureParameters": {
						"action_ind": {
							"value": {
								"value": "I",
								"type": "Expression"
							},
							"type": "String"
						},
						"application_name": {
							"value": {
								"value": "@pipeline().parameters.application_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"dataset_name": {
							"value": {
								"value": "@pipeline().parameters.dataset_group",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@{pipeline().Pipeline}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_run_id": {
							"value": {
								"value": "@{pipeline().RunId}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_status": {
							"value": {
								"value": "Processing",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Audit_Pipeline_Success",
				"description": "Mark pipeline success in audit log tables",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FE-Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 50,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
					"storedProcedureParameters": {
						"action_ind": {
							"value": {
								"value": "U",
								"type": "Expression"
							},
							"type": "String"
						},
						"application_name": {
							"value": {
								"value": "@pipeline().parameters.application_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"dataset_name": {
							"value": {
								"value": "@pipeline().parameters.dataset_group",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@{pipeline().Pipeline}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_run_id": {
							"value": {
								"value": "@{pipeline().RunId}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_status": {
							"value": {
								"value": "Successful",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Audit_Pipeline_Failed",
				"description": "Update pipeline failure in audit log and error log tables.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FE-Metadata",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 50,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
					"storedProcedureParameters": {
						"action_ind": {
							"value": {
								"value": "U",
								"type": "Expression"
							},
							"type": "String"
						},
						"application_name": {
							"value": {
								"value": "@pipeline().parameters.application_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"dataset_name": {
							"value": {
								"value": "@pipeline().parameters.dataset_group",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@{pipeline().Pipeline}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_run_id": {
							"value": {
								"value": "@{pipeline().RunId}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_status": {
							"value": {
								"value": "Failed",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"application_name": {
				"type": "string",
				"defaultValue": "%"
			},
			"dataset_group": {
				"type": "string",
				"defaultValue": "%"
			},
			"parent_id": {
				"type": "string",
				"defaultValue": "%"
			}
		},
		"variables": {
			"data_extract_status": {
				"type": "String",
				"defaultValue": "FAILED"
			},
			"extract_date": {
				"type": "String"
			},
			"env": {
				"type": "String",
				"defaultValue": "DEV"
			}
		},
		"folder": {
			"name": "US_Logistic_Rebus"
		},
		"annotations": []
	}
}