{
	"name": "PL_KHCDE_KHC_DATAOPS_LOG_ANALYTICS_DATA_EXTRACT",
	"properties": {
		"description": "Log Analytics tables extraction",
		"activities": [
			{
				"name": "FE-Metadata",
				"description": "Loop through all the Datasets of SFDC",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get_LogAnalytics_Access_Token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LU-Metadata').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Audit_Log_Copy_Files_To_Stage_Success",
							"description": "Updates the activity success status in khc_audit_log_detail",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "COPY_TO_STAGE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[generic_activity_audit_log]",
								"storedProcedureParameters": {
									"activity_name": {
										"value": {
											"value": "COPY_FILES_TO_STAGE",
											"type": "Expression"
										},
										"type": "String"
									},
									"application_name": {
										"value": {
											"value": "@pipeline().parameters.Application_Name",
											"type": "Expression"
										},
										"type": "String"
									},
									"dataset_name": {
										"value": {
											"value": "@{item().table_name}",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_run_id": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"activity_status": {
										"value": {
											"value": "Successful",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQL",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Audit_Log_Copy_Files_To_Stage_Failed",
							"description": "Updates the khc_audit_log and khc_error_log tables",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "COPY_TO_STAGE",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[generic_activity_error_audit_log]",
								"storedProcedureParameters": {
									"activity_name": {
										"value": {
											"value": "COPY_FILES_TO_STAGE",
											"type": "Expression"
										},
										"type": "String"
									},
									"activity_status": {
										"value": {
											"value": "Failed",
											"type": "Expression"
										},
										"type": "String"
									},
									"application_name": {
										"value": {
											"value": "@pipeline().parameters.Application_Name",
											"type": "Expression"
										},
										"type": "String"
									},
									"dataset_name": {
										"value": {
											"value": "@{item().table_name}",
											"type": "Expression"
										},
										"type": "String"
									},
									"error_code": {
										"value": {
											"value": "N.A.",
											"type": "Expression"
										},
										"type": "String"
									},
									"error_detail": {
										"value": {
											"value": "N.A.",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_run_id": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQL",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Audit_Pipeline_Successful",
							"description": "Audit_Pipeline_Successful",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "IF_UPDATE_LAST_INCR_VALUE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
								"storedProcedureParameters": {
									"action_ind": {
										"value": {
											"value": "U",
											"type": "Expression"
										},
										"type": "String"
									},
									"application_name": {
										"value": {
											"value": "@pipeline().parameters.Application_Name",
											"type": "Expression"
										},
										"type": "String"
									},
									"dataset_name": {
										"value": {
											"value": "@{item().table_name}",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_name": {
										"value": {
											"value": "@{pipeline().Pipeline}",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_run_id": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_status": {
										"value": {
											"value": "Successful",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQL",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "COPY_TO_STAGE",
							"description": "COPY_TO_STAGE",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "If_folder_exists_then_delete",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "BinarySource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true
									},
									"formatSettings": {
										"type": "BinaryReadSettings"
									}
								},
								"sink": {
									"type": "BinarySink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_FolderFile",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@{item().container_name}",
											"type": "Expression"
										},
										"blob_name": {
											"value": "@{replace(item().archival_blob_name, 'yyyyMMdd',formatDateTime(convertTimeZone(variables('extract_date'),'UTC','Eastern Standard Time'),'yyyyMMdd'))}",
											"type": "Expression"
										},
										"file_name": {
											"value": "@concat(item().filename,'_',formatDateTime(convertTimeZone(variables('extract_date'),'UTC','Eastern Standard Time'),'yyyyMMddhhmmss'),'.',item().pattern_type)",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_FolderFile",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@{item().container_name}",
											"type": "Expression"
										},
										"blob_name": {
											"value": "@{item().stage_blob_name}",
											"type": "Expression"
										},
										"file_name": {
											"value": "@concat(item().filename,'_',formatDateTime(convertTimeZone(variables('extract_date'),'UTC','Eastern Standard Time'),'yyyyMMddhhmmss'),'.',item().pattern_type)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "CP_Export_Log_Analytics_Data",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "SET_Mapping",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:30:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:07:00",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "POST",
									"requestBody": {
										"value": "@concat('{',\n'\"query\" : ','\"',item().extraction_query,variables('time_range_condition'),'\"',\n'}')",
										"type": "Expression"
									},
									"additionalHeaders": {
										"content-type": "application/json; charset=utf-8",
										"Authorization": {
											"value": "@concat('Bearer ',activity('Get_LogAnalytics_Access_Token').output.access_token)",
											"type": "Expression"
										}
									},
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings",
										"copyBehavior": "FlattenHierarchy"
									},
									"formatSettings": {
										"type": "JsonWriteSettings",
										"filePattern": "setOfObjects"
									}
								},
								"enableStaging": false,
								"translator": {
									"value": "@json(variables('mapping'))",
									"type": "Expression"
								}
							},
							"inputs": [
								{
									"referenceName": "DS_KHCDE_KHC_DATAOPS_REST_LOG_ANALYTICS",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "DS_KHCDE_GENERIC_ADLS_JSON",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@item().container_name",
											"type": "Expression"
										},
										"blob_path": {
											"value": "@{replace(item().archival_blob_name, 'yyyyMMdd',formatDateTime(convertTimeZone(variables('extract_date'),'UTC','Eastern Standard Time'),'yyyyMMdd'))}",
											"type": "Expression"
										},
										"file_name": {
											"value": "@concat(item().filename,'_',formatDateTime(convertTimeZone(variables('extract_date'),'UTC','Eastern Standard Time'),'yyyyMMddhhmmss'),'.',item().pattern_type)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "SET_Mapping",
							"description": "Set Mapping to the response of Log Analytics API",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set Time Range Where Clause",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "mapping",
								"value": {
									"value": "@item().where_clause",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get_Metadata_if_Folder_exists",
							"description": "Get metadata details if stage folder exists.",
							"type": "GetMetadata",
							"dependsOn": [
								{
									"activity": "CP_Export_Log_Analytics_Data",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_Folder",
									"type": "DatasetReference",
									"parameters": {
										"container_name": {
											"value": "@item().container_name",
											"type": "Expression"
										},
										"blob_name": {
											"value": "@item().stage_blob_name",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"exists",
									"itemType",
									"childItems"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "If_folder_exists_then_delete",
							"description": "Checking if stage folder is exists .If It is exists then delete otherwise do not do anything.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get_Metadata_if_Folder_exists",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(activity('Get_Metadata_if_Folder_exists').output.exists,greater(length(activity('Get_Metadata_if_Folder_exists').output.childItems),0))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "DELETE_FILES_FROM_RAW",
										"description": "Delete files from Blob Location Before Importing new files",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "DS_KHCDE_GENERIC_BLOB_BINARY_Folder",
												"type": "DatasetReference",
												"parameters": {
													"container_name": {
														"value": "@item().container_name",
														"type": "Expression"
													},
													"blob_name": {
														"value": "@item().stage_blob_name",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFileName": "*.json"
											}
										}
									},
									{
										"name": "SP-ActivityAndPipelineFailed01_01",
										"description": "Error Audit log for delete stage file acrivity",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "DELETE_FILES_FROM_RAW",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 5,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[generic_activity_error_audit_log]",
											"storedProcedureParameters": {
												"activity_name": {
													"value": {
														"value": "DELETE_FILES_FROM_RAW",
														"type": "Expression"
													},
													"type": "String"
												},
												"activity_status": {
													"value": {
														"value": "Failed",
														"type": "Expression"
													},
													"type": "String"
												},
												"application_name": {
													"value": {
														"value": "inventory_optimization",
														"type": "Expression"
													},
													"type": "String"
												},
												"dataset_name": {
													"value": {
														"value": "N.A.",
														"type": "Expression"
													},
													"type": "String"
												},
												"error_code": {
													"value": {
														"value": "N.A.",
														"type": "Expression"
													},
													"type": "String"
												},
												"error_detail": {
													"value": {
														"value": "N.A.",
														"type": "Expression"
													},
													"type": "String"
												},
												"pipeline_run_id": {
													"value": {
														"value": "@{pipeline().RunId}",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SQL",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "CHECK_ADHOC_EXTRACT_DATES",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(equals(pipeline().parameters.from_timestamp,null),equals(pipeline().parameters.to_timestamp,null))",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "GET_THE_EXT_DATE_ADHOC",
										"description": "Get the current time in UTC.",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "extract_date",
											"value": {
												"value": "@pipeline().parameters.to_timestamp",
												"type": "Expression"
											}
										}
									},
									{
										"name": "GET_max_incr_value_ADHOC",
										"description": "capture max_incr_value of prev step and append Z in the end",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "max_incr_value",
											"value": {
												"value": "@pipeline().parameters.from_timestamp",
												"type": "Expression"
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "GET_THE_EXT_DATE",
										"description": "Get the current time in UTC.",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "extract_date",
											"value": {
												"value": "@utcnow()",
												"type": "Expression"
											}
										}
									},
									{
										"name": "GET_max_incr_value",
										"description": "capture max_incr_value of prev step and append Z in the end",
										"type": "SetVariable",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"variableName": "max_incr_value",
											"value": {
												"value": "@item().last_incr_value",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "Set Time Range Where Clause",
							"description": "Set the Time range between to fetch the Data ",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "CHECK_ADHOC_EXTRACT_DATES",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "time_range_condition",
								"value": {
									"value": "@concat(' | where TimeGenerated between ( todatetime(',variables('single_quote'),variables('max_incr_value'),variables('single_quote'),')..todatetime(',variables('single_quote'),variables('extract_date'),variables('single_quote'),'))')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "IF_UPDATE_LAST_INCR_VALUE",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "COPY_TO_STAGE",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@and(equals(pipeline().parameters.from_timestamp,null),equals(pipeline().parameters.to_timestamp,null))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "UPDATE_LAST_INCR_VALUE",
										"description": "UPDATE_LAST_INCR_VALUE",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 5,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[update_data_extract_last_incr_value]",
											"storedProcedureParameters": {
												"last_incr_value": {
													"value": {
														"value": "@variables('extract_date')",
														"type": "Expression"
													},
													"type": "String"
												},
												"parent_id": {
													"value": {
														"value": "@{item().parent_id}",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SQL",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Update_Last_Incr_Value_Success",
										"description": "Updates the activity success status in khc_audit_log_detail",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "UPDATE_LAST_INCR_VALUE",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 5,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[generic_activity_audit_log]",
											"storedProcedureParameters": {
												"activity_name": {
													"value": {
														"value": "COPY_FILES_TO_STAGE",
														"type": "Expression"
													},
													"type": "String"
												},
												"application_name": {
													"value": {
														"value": "@pipeline().parameters.Application_Name",
														"type": "Expression"
													},
													"type": "String"
												},
												"dataset_name": {
													"value": {
														"value": "@{item().table_name}",
														"type": "Expression"
													},
													"type": "String"
												},
												"pipeline_run_id": {
													"value": {
														"value": "@{pipeline().RunId}",
														"type": "Expression"
													},
													"type": "String"
												},
												"activity_status": {
													"value": {
														"value": "Successful",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SQL",
											"type": "LinkedServiceReference"
										}
									},
									{
										"name": "Update_Last_Incr_Value_Failed",
										"description": "Updates the khc_audit_log and khc_error_log tables",
										"type": "SqlServerStoredProcedure",
										"dependsOn": [
											{
												"activity": "UPDATE_LAST_INCR_VALUE",
												"dependencyConditions": [
													"Failed"
												]
											}
										],
										"policy": {
											"timeout": "0.00:10:00",
											"retry": 5,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"storedProcedureName": "[dbo].[generic_activity_error_audit_log]",
											"storedProcedureParameters": {
												"activity_name": {
													"value": {
														"value": "COPY_FILES_TO_STAGE",
														"type": "Expression"
													},
													"type": "String"
												},
												"activity_status": {
													"value": {
														"value": "Failed",
														"type": "Expression"
													},
													"type": "String"
												},
												"application_name": {
													"value": {
														"value": "@pipeline().parameters.Application_Name",
														"type": "Expression"
													},
													"type": "String"
												},
												"dataset_name": {
													"value": {
														"value": "@{item().table_name}",
														"type": "Expression"
													},
													"type": "String"
												},
												"error_code": {
													"value": {
														"value": "N.A.",
														"type": "Expression"
													},
													"type": "String"
												},
												"error_detail": {
													"value": {
														"value": "N.A.",
														"type": "Expression"
													},
													"type": "String"
												},
												"pipeline_run_id": {
													"value": {
														"value": "@{pipeline().RunId}",
														"type": "Expression"
													},
													"type": "String"
												}
											}
										},
										"linkedServiceName": {
											"referenceName": "LS_SQL",
											"type": "LinkedServiceReference"
										}
									}
								]
							}
						},
						{
							"name": "IF_UPDATE_LAST_INCR_VALUE_FAILED",
							"description": "Updates the khc_audit_log and khc_error_log tables",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "IF_UPDATE_LAST_INCR_VALUE",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 5,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[generic_activity_error_audit_log]",
								"storedProcedureParameters": {
									"activity_name": {
										"value": {
											"value": "IF_UPDATE_LAST_INCR_VALUE",
											"type": "Expression"
										},
										"type": "String"
									},
									"activity_status": {
										"value": {
											"value": "Failed",
											"type": "Expression"
										},
										"type": "String"
									},
									"application_name": {
										"value": {
											"value": "@pipeline().parameters.Application_Name",
											"type": "Expression"
										},
										"type": "String"
									},
									"dataset_name": {
										"value": {
											"value": "@{item().table_name}",
											"type": "Expression"
										},
										"type": "String"
									},
									"error_code": {
										"value": {
											"value": "N.A.",
											"type": "Expression"
										},
										"type": "String"
									},
									"error_detail": {
										"value": {
											"value": "N.A.",
											"type": "Expression"
										},
										"type": "String"
									},
									"pipeline_run_id": {
										"value": {
											"value": "@{pipeline().RunId}",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SQL",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "SP-Pipelinesuccesful",
				"description": "Pipeline end activity",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "FE-Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
					"storedProcedureParameters": {
						"action_ind": {
							"value": {
								"value": "U",
								"type": "Expression"
							},
							"type": "String"
						},
						"application_name": {
							"value": {
								"value": "@activity('LU-Metadata').output.value[0].application_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"dataset_name": {
							"value": {
								"value": "@activity('LU-Metadata').output.value[0].dataset_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@{pipeline().Pipeline}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_run_id": {
							"value": {
								"value": "@{pipeline().RunId}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_status": {
							"value": {
								"value": "Successful",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get_LogAnalytics_Access_Token",
				"description": "Getting Bearer Access Token to access the log analytics workspace",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get_Secret_Token",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 5,
					"retryIntervalInSeconds": 120,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{concat('https://login.microsoftonline.com/',variables('azure_tenant_id'), '/oauth2/token')}",
						"type": "Expression"
					},
					"method": "POST",
					"headers": {
						"Content-Type": "application/x-www-form-urlencoded"
					},
					"body": {
						"value": "@concat(substring(activity('Get_Secret_Token').output.value,0,lastindexof(activity('Get_Secret_Token').output.value,'resource=')),'resource=https://api.loganalytics.io')",
						"type": "Expression"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://api.loganalytics.io"
					}
				}
			},
			{
				"name": "Get_Secret_Token",
				"description": "Get the Service Principle token value",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "LU-Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 5,
					"retryIntervalInSeconds": 120,
					"secureOutput": true,
					"secureInput": true
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@{concat('https://khcde-kv-', toLower(variables('env')), '.vault.azure.net/secrets/khcde-kv-sec-serv-princ/?api-version=7.0')}",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "set_env_variable",
				"description": "Set the variable - ENV from global parameters - AZURE_ENV",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "SP-PipelineStart",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "env",
					"value": {
						"value": "@pipeline().globalParameters.AZURE_ENV",
						"type": "Expression"
					}
				}
			},
			{
				"name": "LU-Metadata",
				"description": "get the metadata of SFDC datasets from orchestration and control tables",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "set_env_variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:02:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SqlServerSource",
						"sqlReaderQuery": {
							"value": "select\n    om.application_name,\n    om.dataset_name,\n    ctrl.table_name,\n    om.server_name,\n    om.server_path,\n    om.filename,\n    om.data_filename,\n    om.container_name,\n    om.archival_blob_name,\n    om.stage_blob_name,\n    om.blob_trigger_name,\n    om.data_level,\n    om.active_ind,\n    om.parent_id,\n    om.pattern_type,\n    om.field_delimiter,\n    ctrl.dynamic_partition_ind,\n    ctrl.partition_column,\n    ctrl.incr_column_name,\n    ctrl.last_incr_value,\n    ctrl.Select_Columns as extraction_query,\n\tctrl.where_clause\nfrom dbo.khc_orchestration_metadata om inner join\n( Select\n    parent_id,\n    table_name,\n    dynamic_partition_ind,\n    partition_column,\n    where_clause,\n    incr_column_name,\n    last_incr_value,\n    select_columns\nfrom dbo.khc_data_extract_control_table\n) ctrl\non om.parent_id = ctrl.parent_id\nwhere len(trim(om.server_name)) > 0\n  and len(trim(om.application_name)) > 0\n  and len(trim(ctrl.table_name)) > 0\n  and len(trim(om.server_path)) > 0\n  and len(trim(om.filename)) > 0\n  and len(trim(om.data_filename)) > 0\n  and om.file_zip_ind in ('y', 'n')\n  and om.file_checksum_ind in ('y', 'n')\n  and len(trim(om.container_name)) > 0\n  and len(trim(om.archival_blob_name)) > 0\n  and len(trim(om.stage_blob_name)) > 0\n  and om.application_name like  '@{pipeline().parameters.application_name}'\n  and om.dataset_group like  '@{pipeline().parameters.dataset_group}'\n  and om.data_level=2 \n  and om.active_ind = 'y'\n  and server_name = 'LS_REST_LOG_ANALYTICS'\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_KHCDE_GENERIC_MSSQL_Metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "SP-PipelineStart",
				"description": "Pipeline start activity",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:02:00",
					"retry": 5,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[generic_pipeline_audit_log]",
					"storedProcedureParameters": {
						"action_ind": {
							"value": {
								"value": "I",
								"type": "Expression"
							},
							"type": "String"
						},
						"application_name": {
							"value": {
								"value": "@pipeline().parameters.application_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"dataset_name": {
							"value": {
								"value": "@pipeline().parameters.dataset_group",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_status": {
							"value": {
								"value": "Processing",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SQL",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"application_name": {
				"type": "string",
				"defaultValue": "khc_dataops"
			},
			"dataset_group": {
				"type": "string",
				"defaultValue": "log_analytics_data_export"
			},
			"from_timestamp": {
				"type": "string"
			},
			"to_timestamp": {
				"type": "string"
			}
		},
		"variables": {
			"max_incr_value": {
				"type": "String"
			},
			"extract_date": {
				"type": "String"
			},
			"env": {
				"type": "String",
				"defaultValue": "DEV"
			},
			"time_range_condition": {
				"type": "String"
			},
			"single_quote": {
				"type": "String",
				"defaultValue": "'"
			},
			"mapping": {
				"type": "String"
			},
			"azure_tenant_id": {
				"type": "String",
				"defaultValue": "3ce34e42-c07d-47bb-b72a-4ce606de6b88"
			}
		},
		"folder": {
			"name": "KHC_DATAOPS/Sub_Pipeline"
		},
		"annotations": []
	}
}